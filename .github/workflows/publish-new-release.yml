name: Publish new github release

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest
    if: (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix-release/')) && github.event.pull_request.merged == true # only merged pull requests must trigger this job
    steps:
      - name: Extract version from branch name (for release branches)
        id: extract-version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix-}
          VERSION=${VERSION#release/}

          echo "release_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Create GitHub Release & Tag
        id: create_release
        env:
          HUSKY: 0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONVENTIONAL_GITHUB_RELEASER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag -a v${{ steps.extract-version.outputs.release_version }} -m "chore: release v${{ steps.extract-version.outputs.release_version }}"
          git push origin refs/tags/v${{ steps.extract-version.outputs.release_version }}
          npm run release:github
          echo "DATE=$(date)" >> $GITHUB_ENV

      - name: Create pull request into develop
        env:
          GH_TOKEN: ${{ secrets.PAT }}
        run: |
          pr_title="chore(release): merge main into develop after release v${{ steps.extract-version.outputs.release_version }}"
          
          # Create PR body with proper formatting
          cat > pr_body.md << EOF
          :crown: **Automated Post-Release PR**

          This pull request was created automatically by the GitHub Actions workflow. It merges changes from the \`master\` branch into the \`develop\` branch after a release has been completed.

          This ensures that the \`develop\` branch stays up to date with all release-related changes from the \`master\` branch.

          ### Details
          - **Release Version**: v${{ steps.extract-version.outputs.release_version }}

          ---
          Please review and merge it before closing the release ticket. :rocket:
          EOF
          
          # Create the PR using GitHub CLI
          gh pr create \
            --base develop \
            --head master \
            --title "$pr_title" \
            --body-file pr_body.md
